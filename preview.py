"""Preview rendering functionality for blog content."""

import os
import re
import webbrowser
from pathlib import Path
from typing import Optional


def slugify(text: str) -> str:
    """Convert text to URL-friendly slug."""
    # Remove special characters and replace spaces with hyphens
    slug = re.sub(r'[^\w\s-]', '', text.lower())
    slug = re.sub(r'[-\s]+', '-', slug)
    return slug.strip('-')


def create_html_template(title: str, content: str) -> str:
    """Create HTML template for preview."""
    return f"""<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 
                         Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            line-height: 1.6;
            color: #333;
        }}
        h1, h2, h3 {{
            color: #2c3e50;
            margin-top: 2rem;
        }}
        h1 {{
            border-bottom: 2px solid #3498db;
            padding-bottom: 0.5rem;
        }}
        code {{
            background: #f4f4f4;
            padding: 0.2rem 0.4rem;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', monospace;
        }}
        pre {{
            background: #f8f8f8;
            padding: 1rem;
            border-radius: 5px;
            overflow-x: auto;
        }}
        blockquote {{
            border-left: 4px solid #3498db;
            margin: 1rem 0;
            padding-left: 1rem;
            color: #666;
        }}
        .preview-note {{
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 2rem;
        }}
    </style>
</head>
<body>
    <div class="preview-note">
        <strong>üìù Preview Mode</strong> - This is a local preview of 
        generated content. Not published.
    </div>
    
    <article>
        {content}
    </article>
    
    <footer style="margin-top: 3rem; padding-top: 2rem; 
                   border-top: 1px solid #eee; color: #666;">
        <p><em>Generated by CrewAI CLI Tool</em></p>
    </footer>
</body>
</html>"""


def ensure_directories():
    """Ensure preview and staging directories exist."""
    Path("previews").mkdir(exist_ok=True)
    Path("staging").mkdir(exist_ok=True)


def extract_title_from_content(content: str) -> str:
    """Extract title from content (look for first H1 or use default)."""
    lines = content.strip().split('\n')
    for line in lines:
        if line.startswith('# '):
            return line[2:].strip()
    return "Preview Content"


def markdown_to_basic_html(markdown_content: str) -> str:
    """Convert basic markdown to HTML (simple implementation)."""
    html = markdown_content
    
    # Headers
    html = re.sub(r'^### (.*)', r'<h3>\1</h3>', html, flags=re.MULTILINE)
    html = re.sub(r'^## (.*)', r'<h2>\1</h2>', html, flags=re.MULTILINE)
    html = re.sub(r'^# (.*)', r'<h1>\1</h1>', html, flags=re.MULTILINE)
    
    # Bold and italic
    html = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', html)
    html = re.sub(r'\*(.*?)\*', r'<em>\1</em>', html)
    
    # Code blocks
    html = re.sub(r'```(.*?)```', r'<pre><code>\1</code></pre>', 
                  html, flags=re.DOTALL)
    html = re.sub(r'`(.*?)`', r'<code>\1</code>', html)
    
    # Line breaks
    html = html.replace('\n\n', '</p><p>')
    html = html.replace('\n', '<br>')
    html = f'<p>{html}</p>'
    
    # Clean up empty paragraphs
    html = re.sub(r'<p></p>', '', html)
    html = re.sub(r'<p><(h[1-6]|pre)', r'<\1', html)
    html = re.sub(r'</(h[1-6]|pre)></p>', r'</\1>', html)
    
    return html


def generate_preview(content: str, title: Optional[str] = None, 
                    slug: Optional[str] = None) -> str:
    """Generate HTML preview and save files."""
    ensure_directories()
    
    # Extract or use provided title
    if not title:
        title = extract_title_from_content(content)
    
    # Generate slug
    if not slug:
        slug = slugify(title)
    
    # Convert markdown to HTML
    html_content = markdown_to_basic_html(content)
    
    # Create full HTML
    full_html = create_html_template(title, html_content)
    
    # Save HTML preview
    html_path = Path("previews") / f"{slug}.html"
    with open(html_path, 'w', encoding='utf-8') as f:
        f.write(full_html)
    
    # Save markdown in staging
    md_path = Path("staging") / f"{slug}.md"
    with open(md_path, 'w', encoding='utf-8') as f:
        f.write(f"# {title}\n\n{content}")
    
    return str(html_path.absolute())


def open_preview(file_path: str):
    """Open preview file in default browser."""
    try:
        webbrowser.open(f"file://{file_path}")
    except Exception as e:
        print(f"Could not open browser: {e}")
        print(f"Preview saved at: {file_path}")


def preview_content(content: str, title: Optional[str] = None, 
                   slug: Optional[str] = None, auto_open: bool = True) -> str:
    """Complete preview workflow: generate and optionally open."""
    file_path = generate_preview(content, title, slug)
    
    if auto_open:
        open_preview(file_path)
    
    return file_path 